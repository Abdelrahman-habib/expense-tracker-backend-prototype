// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tags.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTag = `-- name: CreateTag :one
INSERT INTO tags (
    user_id,
    name,
    color
) VALUES (
    $1, $2, $3
) RETURNING tag_id, user_id, name, color, created_at, updated_at
`

type CreateTagParams struct {
	UserID uuid.UUID   `json:"userId"`
	Name   string      `json:"name"`
	Color  pgtype.Text `json:"color"`
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (Tag, error) {
	row := q.db.QueryRow(ctx, createTag, arg.UserID, arg.Name, arg.Color)
	var i Tag
	err := row.Scan(
		&i.TagID,
		&i.UserID,
		&i.Name,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags
WHERE tag_id = $1 AND user_id = $2
`

type DeleteTagParams struct {
	TagID  uuid.UUID `json:"tagId"`
	UserID uuid.UUID `json:"userId"`
}

func (q *Queries) DeleteTag(ctx context.Context, arg DeleteTagParams) error {
	_, err := q.db.Exec(ctx, deleteTag, arg.TagID, arg.UserID)
	return err
}

const deleteUserTags = `-- name: DeleteUserTags :exec
DELETE FROM tags
WHERE user_id = $1
`

func (q *Queries) DeleteUserTags(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserTags, userID)
	return err
}

const getTag = `-- name: GetTag :one
SELECT tag_id, user_id, name, color, created_at, updated_at FROM tags
WHERE tag_id = $1 AND user_id = $2
`

type GetTagParams struct {
	TagID  uuid.UUID `json:"tagId"`
	UserID uuid.UUID `json:"userId"`
}

func (q *Queries) GetTag(ctx context.Context, arg GetTagParams) (Tag, error) {
	row := q.db.QueryRow(ctx, getTag, arg.TagID, arg.UserID)
	var i Tag
	err := row.Scan(
		&i.TagID,
		&i.UserID,
		&i.Name,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTags = `-- name: ListTags :many
SELECT tag_id, user_id, name, color, created_at, updated_at FROM tags
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListTags(ctx context.Context, userID uuid.UUID) ([]Tag, error) {
	rows, err := q.db.Query(ctx, listTags, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.TagID,
			&i.UserID,
			&i.Name,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :one
UPDATE tags
SET name = $2,
    color = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE tag_id = $1 AND user_id = $4
RETURNING tag_id, user_id, name, color, created_at, updated_at
`

type UpdateTagParams struct {
	TagID  uuid.UUID   `json:"tagId"`
	Name   string      `json:"name"`
	Color  pgtype.Text `json:"color"`
	UserID uuid.UUID   `json:"userId"`
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) (Tag, error) {
	row := q.db.QueryRow(ctx, updateTag,
		arg.TagID,
		arg.Name,
		arg.Color,
		arg.UserID,
	)
	var i Tag
	err := row.Scan(
		&i.TagID,
		&i.UserID,
		&i.Name,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
