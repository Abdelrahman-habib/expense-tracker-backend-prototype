// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "users" (
  name,
  email,
  external_id,
  provider,
  address_line1,
  address_line2,
  country,
  city,
  state_province,
  zip_postal_code
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
)
RETURNING user_id, external_id, name, email, address_line1, address_line2, country, city, state_province, zip_postal_code, created_at, updated_at, provider, refresh_token_hash, last_login_at
`

type CreateUserParams struct {
	Name          string      `json:"name"`
	Email         string      `json:"email"`
	ExternalID    string      `json:"externalId"`
	Provider      string      `json:"provider"`
	AddressLine1  pgtype.Text `json:"addressLine1"`
	AddressLine2  pgtype.Text `json:"addressLine2"`
	Country       pgtype.Text `json:"country"`
	City          pgtype.Text `json:"city"`
	StateProvince pgtype.Text `json:"stateProvince"`
	ZipPostalCode pgtype.Text `json:"zipPostalCode"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.ExternalID,
		arg.Provider,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.Country,
		arg.City,
		arg.StateProvince,
		arg.ZipPostalCode,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.ExternalID,
		&i.Name,
		&i.Email,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.Country,
		&i.City,
		&i.StateProvince,
		&i.ZipPostalCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Provider,
		&i.RefreshTokenHash,
		&i.LastLoginAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "users"
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, external_id, name, email, address_line1, address_line2, country, city, state_province, zip_postal_code, created_at, updated_at, provider, refresh_token_hash, last_login_at FROM "users"
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.ExternalID,
		&i.Name,
		&i.Email,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.Country,
		&i.City,
		&i.StateProvince,
		&i.ZipPostalCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Provider,
		&i.RefreshTokenHash,
		&i.LastLoginAt,
	)
	return i, err
}

const getUserByExternalID = `-- name: GetUserByExternalID :one
SELECT user_id, external_id, name, email, address_line1, address_line2, country, city, state_province, zip_postal_code, created_at, updated_at, provider, refresh_token_hash, last_login_at FROM "users"
WHERE external_id = $1 AND provider = $2 LIMIT 1
`

type GetUserByExternalIDParams struct {
	ExternalID string `json:"externalId"`
	Provider   string `json:"provider"`
}

func (q *Queries) GetUserByExternalID(ctx context.Context, arg GetUserByExternalIDParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByExternalID, arg.ExternalID, arg.Provider)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.ExternalID,
		&i.Name,
		&i.Email,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.Country,
		&i.City,
		&i.StateProvince,
		&i.ZipPostalCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Provider,
		&i.RefreshTokenHash,
		&i.LastLoginAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, external_id, name, email, address_line1, address_line2, country, city, state_province, zip_postal_code, created_at, updated_at, provider, refresh_token_hash, last_login_at FROM "users"
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.ExternalID,
			&i.Name,
			&i.Email,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.Country,
			&i.City,
			&i.StateProvince,
			&i.ZipPostalCode,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Provider,
			&i.RefreshTokenHash,
			&i.LastLoginAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersPaginated = `-- name: ListUsersPaginated :many
SELECT user_id, external_id, name, email, address_line1, address_line2, country, city, state_province, zip_postal_code, created_at, updated_at, provider, refresh_token_hash, last_login_at FROM "users"
WHERE (created_at, user_id) < ($1, $2)
ORDER BY created_at DESC, user_id DESC
LIMIT $3
`

type ListUsersPaginatedParams struct {
	CreatedAt   pgtype.Timestamp `json:"createdAt"`
	CreatedAt_2 pgtype.Timestamp `json:"createdAt2"`
	Limit       int32            `json:"limit"`
}

// Add efficient pagination using keyset pagination
func (q *Queries) ListUsersPaginated(ctx context.Context, arg ListUsersPaginatedParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsersPaginated, arg.CreatedAt, arg.CreatedAt_2, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.ExternalID,
			&i.Name,
			&i.Email,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.Country,
			&i.City,
			&i.StateProvince,
			&i.ZipPostalCode,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Provider,
			&i.RefreshTokenHash,
			&i.LastLoginAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchUsers = `-- name: SearchUsers :many
SELECT user_id, external_id, name, email, address_line1, address_line2, country, city, state_province, zip_postal_code, created_at, updated_at, provider, refresh_token_hash, last_login_at FROM users
WHERE name ILIKE $1
ORDER BY 
    CASE WHEN name ILIKE $1 THEN 0
         WHEN name ILIKE ($1 || '%') THEN 1
         ELSE 2
    END,
    created_at DESC
LIMIT $2
`

type SearchUsersParams struct {
	Name  string `json:"name"`
	Limit int32  `json:"limit"`
}

// Add efficient search
func (q *Queries) SearchUsers(ctx context.Context, arg SearchUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, searchUsers, arg.Name, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.ExternalID,
			&i.Name,
			&i.Email,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.Country,
			&i.City,
			&i.StateProvince,
			&i.ZipPostalCode,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Provider,
			&i.RefreshTokenHash,
			&i.LastLoginAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE "users"
SET 
  name = COALESCE($2, name),
  email = COALESCE($3, email),
  address_line1 = COALESCE($4, address_line1),
  address_line2 = COALESCE($5, address_line2),
  country = COALESCE($6, country),
  city = COALESCE($7, city),
  state_province = COALESCE($8, state_province),
  zip_postal_code = COALESCE($9, zip_postal_code),
  updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
RETURNING user_id, external_id, name, email, address_line1, address_line2, country, city, state_province, zip_postal_code, created_at, updated_at, provider, refresh_token_hash, last_login_at
`

type UpdateUserParams struct {
	UserID        uuid.UUID   `json:"userId"`
	Name          string      `json:"name"`
	Email         string      `json:"email"`
	AddressLine1  pgtype.Text `json:"addressLine1"`
	AddressLine2  pgtype.Text `json:"addressLine2"`
	Country       pgtype.Text `json:"country"`
	City          pgtype.Text `json:"city"`
	StateProvince pgtype.Text `json:"stateProvince"`
	ZipPostalCode pgtype.Text `json:"zipPostalCode"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.UserID,
		arg.Name,
		arg.Email,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.Country,
		arg.City,
		arg.StateProvince,
		arg.ZipPostalCode,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.ExternalID,
		&i.Name,
		&i.Email,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.Country,
		&i.City,
		&i.StateProvince,
		&i.ZipPostalCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Provider,
		&i.RefreshTokenHash,
		&i.LastLoginAt,
	)
	return i, err
}

const updateUserLastLogin = `-- name: UpdateUserLastLogin :exec
UPDATE "users"
SET 
  last_login_at = CURRENT_TIMESTAMP,
  updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
`

func (q *Queries) UpdateUserLastLogin(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateUserLastLogin, userID)
	return err
}

const updateUserRefreshToken = `-- name: UpdateUserRefreshToken :exec
UPDATE "users"
SET 
  refresh_token_hash = $2,
  updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
`

type UpdateUserRefreshTokenParams struct {
	UserID           uuid.UUID   `json:"userId"`
	RefreshTokenHash pgtype.Text `json:"refreshTokenHash"`
}

func (q *Queries) UpdateUserRefreshToken(ctx context.Context, arg UpdateUserRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, updateUserRefreshToken, arg.UserID, arg.RefreshTokenHash)
	return err
}
