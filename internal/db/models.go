// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type ProjectsStatus string

const (
	ProjectsStatusOngoing   ProjectsStatus = "ongoing"
	ProjectsStatusCompleted ProjectsStatus = "completed"
	ProjectsStatusCanceled  ProjectsStatus = "canceled"
)

func (e *ProjectsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProjectsStatus(s)
	case string:
		*e = ProjectsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ProjectsStatus: %T", src)
	}
	return nil
}

type NullProjectsStatus struct {
	ProjectsStatus ProjectsStatus `json:"projectsStatus"`
	Valid          bool           `json:"valid"` // Valid is true if ProjectsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProjectsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ProjectsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProjectsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProjectsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProjectsStatus), nil
}

type Contact struct {
	ContactID     uuid.UUID        `json:"contactId"`
	UserID        uuid.UUID        `json:"userId"`
	Name          string           `json:"name"`
	Phone         pgtype.Text      `json:"phone"`
	Email         pgtype.Text      `json:"email"`
	AddressLine1  pgtype.Text      `json:"addressLine1"`
	AddressLine2  pgtype.Text      `json:"addressLine2"`
	Country       pgtype.Text      `json:"country"`
	City          pgtype.Text      `json:"city"`
	StateProvince pgtype.Text      `json:"stateProvince"`
	ZipPostalCode pgtype.Text      `json:"zipPostalCode"`
	Tags          []uuid.UUID      `json:"tags"`
	CreatedAt     pgtype.Timestamp `json:"createdAt"`
	UpdatedAt     pgtype.Timestamp `json:"updatedAt"`
}

type Project struct {
	ProjectID     uuid.UUID        `json:"projectId"`
	UserID        uuid.UUID        `json:"userId"`
	Name          string           `json:"name"`
	Description   pgtype.Text      `json:"description"`
	Status        ProjectsStatus   `json:"status"`
	StartDate     pgtype.Timestamp `json:"startDate"`
	EndDate       pgtype.Timestamp `json:"endDate"`
	Budget        pgtype.Numeric   `json:"budget"`
	ActualCost    pgtype.Numeric   `json:"actualCost"`
	AddressLine1  pgtype.Text      `json:"addressLine1"`
	AddressLine2  pgtype.Text      `json:"addressLine2"`
	Country       pgtype.Text      `json:"country"`
	City          pgtype.Text      `json:"city"`
	StateProvince pgtype.Text      `json:"stateProvince"`
	ZipPostalCode pgtype.Text      `json:"zipPostalCode"`
	Website       pgtype.Text      `json:"website"`
	Tags          []uuid.UUID      `json:"tags"`
	CreatedAt     pgtype.Timestamp `json:"createdAt"`
	UpdatedAt     pgtype.Timestamp `json:"updatedAt"`
}

type Session struct {
	SessionID uuid.UUID        `json:"sessionId"`
	Key       string           `json:"key"`
	Value     []byte           `json:"value"`
	ExpiresAt pgtype.Timestamp `json:"expiresAt"`
	CreatedAt pgtype.Timestamp `json:"createdAt"`
	UpdatedAt pgtype.Timestamp `json:"updatedAt"`
}

type Tag struct {
	TagID     uuid.UUID        `json:"tagId"`
	UserID    uuid.UUID        `json:"userId"`
	Name      string           `json:"name"`
	Color     pgtype.Text      `json:"color"`
	CreatedAt pgtype.Timestamp `json:"createdAt"`
	UpdatedAt pgtype.Timestamp `json:"updatedAt"`
}

type User struct {
	UserID           uuid.UUID        `json:"userId"`
	ExternalID       string           `json:"externalId"`
	Name             string           `json:"name"`
	Email            string           `json:"email"`
	AddressLine1     pgtype.Text      `json:"addressLine1"`
	AddressLine2     pgtype.Text      `json:"addressLine2"`
	Country          pgtype.Text      `json:"country"`
	City             pgtype.Text      `json:"city"`
	StateProvince    pgtype.Text      `json:"stateProvince"`
	ZipPostalCode    pgtype.Text      `json:"zipPostalCode"`
	CreatedAt        pgtype.Timestamp `json:"createdAt"`
	UpdatedAt        pgtype.Timestamp `json:"updatedAt"`
	Provider         string           `json:"provider"`
	RefreshTokenHash pgtype.Text      `json:"refreshTokenHash"`
	LastLoginAt      pgtype.Timestamp `json:"lastLoginAt"`
}

type UsersSetting struct {
	UserSettingsID  uuid.UUID        `json:"userSettingsId"`
	UserID          uuid.UUID        `json:"userId"`
	DefaultCurrency string           `json:"defaultCurrency"`
	DefaultCountry  pgtype.Text      `json:"defaultCountry"`
	Timezone        pgtype.Text      `json:"timezone"`
	DateFormat      pgtype.Text      `json:"dateFormat"`
	NumberFormat    pgtype.Text      `json:"numberFormat"`
	CreatedAt       pgtype.Timestamp `json:"createdAt"`
	UpdatedAt       pgtype.Timestamp `json:"updatedAt"`
}

type Wallet struct {
	WalletID  uuid.UUID        `json:"walletId"`
	UserID    uuid.UUID        `json:"userId"`
	ProjectID pgtype.UUID      `json:"projectId"`
	Name      string           `json:"name"`
	Balance   pgtype.Numeric   `json:"balance"`
	Currency  string           `json:"currency"`
	Tags      []uuid.UUID      `json:"tags"`
	CreatedAt pgtype.Timestamp `json:"createdAt"`
	UpdatedAt pgtype.Timestamp `json:"updatedAt"`
}
