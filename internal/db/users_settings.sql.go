// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users_settings.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUserSettings = `-- name: CreateUserSettings :one
INSERT INTO users_settings (
    user_id,
    default_currency,
    default_country,
    timezone,
    date_format,
    number_format
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING user_settings_id, user_id, default_currency, default_country, timezone, date_format, number_format, created_at, updated_at
`

type CreateUserSettingsParams struct {
	UserID          uuid.UUID   `json:"userId"`
	DefaultCurrency string      `json:"defaultCurrency"`
	DefaultCountry  pgtype.Text `json:"defaultCountry"`
	Timezone        pgtype.Text `json:"timezone"`
	DateFormat      pgtype.Text `json:"dateFormat"`
	NumberFormat    pgtype.Text `json:"numberFormat"`
}

func (q *Queries) CreateUserSettings(ctx context.Context, arg CreateUserSettingsParams) (UsersSetting, error) {
	row := q.db.QueryRow(ctx, createUserSettings,
		arg.UserID,
		arg.DefaultCurrency,
		arg.DefaultCountry,
		arg.Timezone,
		arg.DateFormat,
		arg.NumberFormat,
	)
	var i UsersSetting
	err := row.Scan(
		&i.UserSettingsID,
		&i.UserID,
		&i.DefaultCurrency,
		&i.DefaultCountry,
		&i.Timezone,
		&i.DateFormat,
		&i.NumberFormat,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserSettings = `-- name: DeleteUserSettings :exec
DELETE FROM users_settings
WHERE user_id = $1
`

func (q *Queries) DeleteUserSettings(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserSettings, userID)
	return err
}

const getUserSettings = `-- name: GetUserSettings :one
SELECT user_settings_id, user_id, default_currency, default_country, timezone, date_format, number_format, created_at, updated_at FROM users_settings
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserSettings(ctx context.Context, userID uuid.UUID) (UsersSetting, error) {
	row := q.db.QueryRow(ctx, getUserSettings, userID)
	var i UsersSetting
	err := row.Scan(
		&i.UserSettingsID,
		&i.UserID,
		&i.DefaultCurrency,
		&i.DefaultCountry,
		&i.Timezone,
		&i.DateFormat,
		&i.NumberFormat,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserSettings = `-- name: UpdateUserSettings :one
UPDATE users_settings
SET 
    default_currency = COALESCE($2, default_currency),
    default_country = COALESCE($3, default_country),
    timezone = COALESCE($4, timezone),
    date_format = COALESCE($5, date_format),
    number_format = COALESCE($6, number_format),
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
RETURNING user_settings_id, user_id, default_currency, default_country, timezone, date_format, number_format, created_at, updated_at
`

type UpdateUserSettingsParams struct {
	UserID          uuid.UUID   `json:"userId"`
	DefaultCurrency string      `json:"defaultCurrency"`
	DefaultCountry  pgtype.Text `json:"defaultCountry"`
	Timezone        pgtype.Text `json:"timezone"`
	DateFormat      pgtype.Text `json:"dateFormat"`
	NumberFormat    pgtype.Text `json:"numberFormat"`
}

func (q *Queries) UpdateUserSettings(ctx context.Context, arg UpdateUserSettingsParams) (UsersSetting, error) {
	row := q.db.QueryRow(ctx, updateUserSettings,
		arg.UserID,
		arg.DefaultCurrency,
		arg.DefaultCountry,
		arg.Timezone,
		arg.DateFormat,
		arg.NumberFormat,
	)
	var i UsersSetting
	err := row.Scan(
		&i.UserSettingsID,
		&i.UserID,
		&i.DefaultCurrency,
		&i.DefaultCountry,
		&i.Timezone,
		&i.DateFormat,
		&i.NumberFormat,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
