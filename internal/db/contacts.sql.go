// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: contacts.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contacts (
    user_id,
    name,
    phone,
    email,
    address_line1,
    address_line2,
    country,
    city,
    state_province,
    zip_postal_code,
    tags
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING contact_id, user_id, name, phone, email, address_line1, address_line2, country, city, state_province, zip_postal_code, tags, created_at, updated_at
`

type CreateContactParams struct {
	UserID        uuid.UUID   `json:"userId"`
	Name          string      `json:"name"`
	Phone         pgtype.Text `json:"phone"`
	Email         pgtype.Text `json:"email"`
	AddressLine1  pgtype.Text `json:"addressLine1"`
	AddressLine2  pgtype.Text `json:"addressLine2"`
	Country       pgtype.Text `json:"country"`
	City          pgtype.Text `json:"city"`
	StateProvince pgtype.Text `json:"stateProvince"`
	ZipPostalCode pgtype.Text `json:"zipPostalCode"`
	Tags          []uuid.UUID `json:"tags"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRow(ctx, createContact,
		arg.UserID,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.Country,
		arg.City,
		arg.StateProvince,
		arg.ZipPostalCode,
		arg.Tags,
	)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.UserID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.Country,
		&i.City,
		&i.StateProvince,
		&i.ZipPostalCode,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM contacts
WHERE contact_id = $1 AND user_id = $2
`

type DeleteContactParams struct {
	ContactID uuid.UUID `json:"contactId"`
	UserID    uuid.UUID `json:"userId"`
}

func (q *Queries) DeleteContact(ctx context.Context, arg DeleteContactParams) error {
	_, err := q.db.Exec(ctx, deleteContact, arg.ContactID, arg.UserID)
	return err
}

const getContact = `-- name: GetContact :one
SELECT contact_id, user_id, name, phone, email, address_line1, address_line2, country, city, state_province, zip_postal_code, tags, created_at, updated_at FROM contacts
WHERE contact_id = $1 AND user_id = $2 LIMIT 1
`

type GetContactParams struct {
	ContactID uuid.UUID `json:"contactId"`
	UserID    uuid.UUID `json:"userId"`
}

func (q *Queries) GetContact(ctx context.Context, arg GetContactParams) (Contact, error) {
	row := q.db.QueryRow(ctx, getContact, arg.ContactID, arg.UserID)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.UserID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.Country,
		&i.City,
		&i.StateProvince,
		&i.ZipPostalCode,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listContacts = `-- name: ListContacts :many
SELECT contact_id, user_id, name, phone, email, address_line1, address_line2, country, city, state_province, zip_postal_code, tags, created_at, updated_at FROM contacts
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListContactsParams struct {
	UserID uuid.UUID `json:"userId"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListContacts(ctx context.Context, arg ListContactsParams) ([]Contact, error) {
	rows, err := q.db.Query(ctx, listContacts, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ContactID,
			&i.UserID,
			&i.Name,
			&i.Phone,
			&i.Email,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.Country,
			&i.City,
			&i.StateProvince,
			&i.ZipPostalCode,
			&i.Tags,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listContactsPaginated = `-- name: ListContactsPaginated :many
SELECT contact_id, user_id, name, phone, email, address_line1, address_line2, country, city, state_province, zip_postal_code, tags, created_at, updated_at 
FROM contacts
WHERE user_id = $1 
  AND (created_at < $2 OR (created_at = $2 AND contact_id < $3))
ORDER BY created_at DESC, contact_id DESC
LIMIT $4
`

type ListContactsPaginatedParams struct {
	UserID    uuid.UUID        `json:"userId"`
	CreatedAt pgtype.Timestamp `json:"createdAt"`
	ContactID uuid.UUID        `json:"contactId"`
	Limit     int32            `json:"limit"`
}

func (q *Queries) ListContactsPaginated(ctx context.Context, arg ListContactsPaginatedParams) ([]Contact, error) {
	rows, err := q.db.Query(ctx, listContactsPaginated,
		arg.UserID,
		arg.CreatedAt,
		arg.ContactID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ContactID,
			&i.UserID,
			&i.Name,
			&i.Phone,
			&i.Email,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.Country,
			&i.City,
			&i.StateProvince,
			&i.ZipPostalCode,
			&i.Tags,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchContacts = `-- name: SearchContacts :many
SELECT contact_id, user_id, name, phone, email, address_line1, address_line2, country, city, state_province, zip_postal_code, tags, created_at, updated_at
FROM contacts
WHERE user_id = $1
  AND (
      $2::text = ''  -- No filter applied if sqlc.arg('name') is empty
      OR name ILIKE '%' || $2 || '%'  -- Substring match
      OR name <-> $2 < 0.9  -- Trigram similarity with threshold high for low sim to be included
  )
ORDER BY 
    CASE WHEN $2 = '' THEN created_at END DESC,  -- If sqlc.arg('name') is empty, sort by created_at
    CASE WHEN $2 <> '' THEN name <-> $2 END,  -- If sqlc.arg('name') is provided, sort by trigram similarity
    length(name) ASC  -- Shorter names are preferred as tiebreaker
LIMIT $3
`

type SearchContactsParams struct {
	UserID uuid.UUID `json:"userId"`
	Name   string    `json:"name"`
	Limit  int32     `json:"limit"`
}

func (q *Queries) SearchContacts(ctx context.Context, arg SearchContactsParams) ([]Contact, error) {
	rows, err := q.db.Query(ctx, searchContacts, arg.UserID, arg.Name, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ContactID,
			&i.UserID,
			&i.Name,
			&i.Phone,
			&i.Email,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.Country,
			&i.City,
			&i.StateProvince,
			&i.ZipPostalCode,
			&i.Tags,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchContactsByPhone = `-- name: SearchContactsByPhone :many
SELECT contact_id, user_id, name, phone, email, address_line1, address_line2, country, city, state_province, zip_postal_code, tags, created_at, updated_at
FROM contacts
WHERE user_id = $1
  AND (
      $2::text = ''  -- No filter applied if sqlc.arg('phone') is empty
      OR phone LIKE $2 || '%'
  )
ORDER BY 
    CASE WHEN $2 = '' THEN created_at END DESC,
    CASE 
        WHEN phone = $2 THEN 1  -- Exact match
        WHEN phone LIKE $2 || '%' THEN 2  -- Starts with
        ELSE 3  -- Contains
    END,
    created_at DESC
LIMIT $3
`

type SearchContactsByPhoneParams struct {
	UserID uuid.UUID `json:"userId"`
	Phone  string    `json:"phone"`
	Limit  int32     `json:"limit"`
}

func (q *Queries) SearchContactsByPhone(ctx context.Context, arg SearchContactsByPhoneParams) ([]Contact, error) {
	rows, err := q.db.Query(ctx, searchContactsByPhone, arg.UserID, arg.Phone, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ContactID,
			&i.UserID,
			&i.Name,
			&i.Phone,
			&i.Email,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.Country,
			&i.City,
			&i.StateProvince,
			&i.ZipPostalCode,
			&i.Tags,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: UpdateContact :one
UPDATE contacts
SET 
    name = COALESCE($1, name),
    phone = $2,
    email = $3,
    address_line1 = $4,
    address_line2 = $5,
    country = $6,
    city = $7,
    state_province = $8,
    zip_postal_code = $9,
    tags = $10,
    updated_at = CURRENT_TIMESTAMP
WHERE contact_id = $11 AND user_id = $12
RETURNING contact_id, user_id, name, phone, email, address_line1, address_line2, country, city, state_province, zip_postal_code, tags, created_at, updated_at
`

type UpdateContactParams struct {
	Name          pgtype.Text `json:"name"`
	Phone         pgtype.Text `json:"phone"`
	Email         pgtype.Text `json:"email"`
	AddressLine1  pgtype.Text `json:"addressLine1"`
	AddressLine2  pgtype.Text `json:"addressLine2"`
	Country       pgtype.Text `json:"country"`
	City          pgtype.Text `json:"city"`
	StateProvince pgtype.Text `json:"stateProvince"`
	ZipPostalCode pgtype.Text `json:"zipPostalCode"`
	Tags          []uuid.UUID `json:"tags"`
	ContactID     uuid.UUID   `json:"contactId"`
	UserID        uuid.UUID   `json:"userId"`
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (Contact, error) {
	row := q.db.QueryRow(ctx, updateContact,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.Country,
		arg.City,
		arg.StateProvince,
		arg.ZipPostalCode,
		arg.Tags,
		arg.ContactID,
		arg.UserID,
	)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.UserID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.Country,
		&i.City,
		&i.StateProvince,
		&i.ZipPostalCode,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
