// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: wallets.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets (
    user_id,
    project_id,
    name,
    balance,
    currency,
    tags
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING wallet_id, user_id, project_id, name, balance, currency, tags, created_at, updated_at
`

type CreateWalletParams struct {
	UserID    uuid.UUID      `json:"userId"`
	ProjectID pgtype.UUID    `json:"projectId"`
	Name      string         `json:"name"`
	Balance   pgtype.Numeric `json:"balance"`
	Currency  string         `json:"currency"`
	Tags      []uuid.UUID    `json:"tags"`
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, createWallet,
		arg.UserID,
		arg.ProjectID,
		arg.Name,
		arg.Balance,
		arg.Currency,
		arg.Tags,
	)
	var i Wallet
	err := row.Scan(
		&i.WalletID,
		&i.UserID,
		&i.ProjectID,
		&i.Name,
		&i.Balance,
		&i.Currency,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWallet = `-- name: DeleteWallet :exec
DELETE FROM wallets
WHERE wallet_id = $1 AND user_id = $2
`

type DeleteWalletParams struct {
	WalletID uuid.UUID `json:"walletId"`
	UserID   uuid.UUID `json:"userId"`
}

func (q *Queries) DeleteWallet(ctx context.Context, arg DeleteWalletParams) error {
	_, err := q.db.Exec(ctx, deleteWallet, arg.WalletID, arg.UserID)
	return err
}

const getProjectWallets = `-- name: GetProjectWallets :many
SELECT wallet_id, user_id, project_id, name, balance, currency, tags, created_at, updated_at FROM wallets
WHERE project_id = $1 AND user_id = $2
ORDER BY created_at DESC
`

type GetProjectWalletsParams struct {
	ProjectID pgtype.UUID `json:"projectId"`
	UserID    uuid.UUID   `json:"userId"`
}

func (q *Queries) GetProjectWallets(ctx context.Context, arg GetProjectWalletsParams) ([]Wallet, error) {
	rows, err := q.db.Query(ctx, getProjectWallets, arg.ProjectID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.WalletID,
			&i.UserID,
			&i.ProjectID,
			&i.Name,
			&i.Balance,
			&i.Currency,
			&i.Tags,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWallet = `-- name: GetWallet :one
SELECT wallet_id, user_id, project_id, name, balance, currency, tags, created_at, updated_at FROM wallets
WHERE wallet_id = $1 AND user_id = $2 LIMIT 1
`

type GetWalletParams struct {
	WalletID uuid.UUID `json:"walletId"`
	UserID   uuid.UUID `json:"userId"`
}

func (q *Queries) GetWallet(ctx context.Context, arg GetWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWallet, arg.WalletID, arg.UserID)
	var i Wallet
	err := row.Scan(
		&i.WalletID,
		&i.UserID,
		&i.ProjectID,
		&i.Name,
		&i.Balance,
		&i.Currency,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listWallets = `-- name: ListWallets :many
SELECT wallet_id, user_id, project_id, name, balance, currency, tags, created_at, updated_at FROM wallets
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListWalletsParams struct {
	UserID uuid.UUID `json:"userId"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListWallets(ctx context.Context, arg ListWalletsParams) ([]Wallet, error) {
	rows, err := q.db.Query(ctx, listWallets, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.WalletID,
			&i.UserID,
			&i.ProjectID,
			&i.Name,
			&i.Balance,
			&i.Currency,
			&i.Tags,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWalletsPaginated = `-- name: ListWalletsPaginated :many
SELECT wallet_id, user_id, project_id, name, balance, currency, tags, created_at, updated_at 
FROM wallets
WHERE user_id = $1 
  AND (created_at < $2 OR (created_at = $2 AND wallet_id < $3))
ORDER BY created_at DESC, wallet_id DESC
LIMIT $4
`

type ListWalletsPaginatedParams struct {
	UserID    uuid.UUID        `json:"userId"`
	CreatedAt pgtype.Timestamp `json:"createdAt"`
	WalletID  uuid.UUID        `json:"walletId"`
	Limit     int32            `json:"limit"`
}

func (q *Queries) ListWalletsPaginated(ctx context.Context, arg ListWalletsPaginatedParams) ([]Wallet, error) {
	rows, err := q.db.Query(ctx, listWalletsPaginated,
		arg.UserID,
		arg.CreatedAt,
		arg.WalletID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.WalletID,
			&i.UserID,
			&i.ProjectID,
			&i.Name,
			&i.Balance,
			&i.Currency,
			&i.Tags,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchWallets = `-- name: SearchWallets :many
SELECT wallet_id, user_id, project_id, name, balance, currency, tags, created_at, updated_at
FROM wallets
WHERE user_id = $1
  AND (
      $2::text = ''  -- No filter applied if sqlc.arg('name') is empty
      OR name ILIKE '%' || $2 || '%'  -- Substring match
      OR name <-> $2 < 0.8  -- Trigram similarity with threshold
  )
ORDER BY 
    CASE WHEN $2 = '' THEN created_at END DESC,  -- If sqlc.arg('name') is empty, sort by created_at
    CASE WHEN $2 <> '' THEN name <-> $2 END,  -- If sqlc.arg('name') is provided, sort by trigram similarity
    length(name) ASC  -- Shorter names are preferred as tiebreaker
LIMIT $3
`

type SearchWalletsParams struct {
	UserID uuid.UUID `json:"userId"`
	Name   string    `json:"name"`
	Limit  int32     `json:"limit"`
}

func (q *Queries) SearchWallets(ctx context.Context, arg SearchWalletsParams) ([]Wallet, error) {
	rows, err := q.db.Query(ctx, searchWallets, arg.UserID, arg.Name, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.WalletID,
			&i.UserID,
			&i.ProjectID,
			&i.Name,
			&i.Balance,
			&i.Currency,
			&i.Tags,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWallet = `-- name: UpdateWallet :one
UPDATE wallets
SET 
    name = COALESCE($1, name),
    balance = $2,
    currency = COALESCE($3, currency),
    tags = $4,
    updated_at = CURRENT_TIMESTAMP

WHERE wallet_id = $5 AND user_id = $6
RETURNING wallet_id, user_id, project_id, name, balance, currency, tags, created_at, updated_at
`

type UpdateWalletParams struct {
	Name     pgtype.Text    `json:"name"`
	Balance  pgtype.Numeric `json:"balance"`
	Currency pgtype.Text    `json:"currency"`
	Tags     []uuid.UUID    `json:"tags"`
	WalletID uuid.UUID      `json:"walletId"`
	UserID   uuid.UUID      `json:"userId"`
}

func (q *Queries) UpdateWallet(ctx context.Context, arg UpdateWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, updateWallet,
		arg.Name,
		arg.Balance,
		arg.Currency,
		arg.Tags,
		arg.WalletID,
		arg.UserID,
	)
	var i Wallet
	err := row.Scan(
		&i.WalletID,
		&i.UserID,
		&i.ProjectID,
		&i.Name,
		&i.Balance,
		&i.Currency,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
