// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: projects.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
    user_id,
    name,
    description,
    status,
    start_date,
    end_date,
    budget,
    actual_cost,
    address_line1,
    address_line2,
    country,
    city,
    state_province,
    zip_postal_code,
    website,
    tags
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16
)
RETURNING project_id, user_id, name, description, status, start_date, end_date, budget, actual_cost, address_line1, address_line2, country, city, state_province, zip_postal_code, website, tags, created_at, updated_at
`

type CreateProjectParams struct {
	UserID        uuid.UUID        `json:"userId"`
	Name          string           `json:"name"`
	Description   pgtype.Text      `json:"description"`
	Status        ProjectsStatus   `json:"status"`
	StartDate     pgtype.Timestamp `json:"startDate"`
	EndDate       pgtype.Timestamp `json:"endDate"`
	Budget        pgtype.Numeric   `json:"budget"`
	ActualCost    pgtype.Numeric   `json:"actualCost"`
	AddressLine1  pgtype.Text      `json:"addressLine1"`
	AddressLine2  pgtype.Text      `json:"addressLine2"`
	Country       pgtype.Text      `json:"country"`
	City          pgtype.Text      `json:"city"`
	StateProvince pgtype.Text      `json:"stateProvince"`
	ZipPostalCode pgtype.Text      `json:"zipPostalCode"`
	Website       pgtype.Text      `json:"website"`
	Tags          []uuid.UUID      `json:"tags"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.Status,
		arg.StartDate,
		arg.EndDate,
		arg.Budget,
		arg.ActualCost,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.Country,
		arg.City,
		arg.StateProvince,
		arg.ZipPostalCode,
		arg.Website,
		arg.Tags,
	)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
		&i.Budget,
		&i.ActualCost,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.Country,
		&i.City,
		&i.StateProvince,
		&i.ZipPostalCode,
		&i.Website,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE project_id = $1 AND user_id = $2
`

type DeleteProjectParams struct {
	ProjectID uuid.UUID `json:"projectId"`
	UserID    uuid.UUID `json:"userId"`
}

func (q *Queries) DeleteProject(ctx context.Context, arg DeleteProjectParams) error {
	_, err := q.db.Exec(ctx, deleteProject, arg.ProjectID, arg.UserID)
	return err
}

const getProject = `-- name: GetProject :one
SELECT project_id, user_id, name, description, status, start_date, end_date, budget, actual_cost, address_line1, address_line2, country, city, state_province, zip_postal_code, website, tags, created_at, updated_at FROM projects
WHERE project_id = $1 AND user_id = $2 LIMIT 1
`

type GetProjectParams struct {
	ProjectID uuid.UUID `json:"projectId"`
	UserID    uuid.UUID `json:"userId"`
}

func (q *Queries) GetProject(ctx context.Context, arg GetProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, getProject, arg.ProjectID, arg.UserID)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
		&i.Budget,
		&i.ActualCost,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.Country,
		&i.City,
		&i.StateProvince,
		&i.ZipPostalCode,
		&i.Website,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProjects = `-- name: ListProjects :many
SELECT project_id, user_id, name, description, status, start_date, end_date, budget, actual_cost, address_line1, address_line2, country, city, state_province, zip_postal_code, website, tags, created_at, updated_at FROM projects
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListProjects(ctx context.Context, userID uuid.UUID) ([]Project, error) {
	rows, err := q.db.Query(ctx, listProjects, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ProjectID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.StartDate,
			&i.EndDate,
			&i.Budget,
			&i.ActualCost,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.Country,
			&i.City,
			&i.StateProvince,
			&i.ZipPostalCode,
			&i.Website,
			&i.Tags,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectsPaginated = `-- name: ListProjectsPaginated :many
SELECT project_id, user_id, name, description, status, start_date, end_date, budget, actual_cost, address_line1, address_line2, country, city, state_province, zip_postal_code, website, tags, created_at, updated_at
FROM projects
WHERE user_id = $1 
  AND (created_at < $2 OR (created_at = $2 AND project_id < $3))
ORDER BY created_at DESC, project_id DESC
LIMIT $4
`

type ListProjectsPaginatedParams struct {
	UserID    uuid.UUID        `json:"userId"`
	CreatedAt pgtype.Timestamp `json:"createdAt"`
	ProjectID uuid.UUID        `json:"projectId"`
	Limit     int32            `json:"limit"`
}

func (q *Queries) ListProjectsPaginated(ctx context.Context, arg ListProjectsPaginatedParams) ([]Project, error) {
	rows, err := q.db.Query(ctx, listProjectsPaginated,
		arg.UserID,
		arg.CreatedAt,
		arg.ProjectID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ProjectID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.StartDate,
			&i.EndDate,
			&i.Budget,
			&i.ActualCost,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.Country,
			&i.City,
			&i.StateProvince,
			&i.ZipPostalCode,
			&i.Website,
			&i.Tags,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProjects = `-- name: SearchProjects :many
SELECT project_id, user_id, name, description, status, start_date, end_date, budget, actual_cost, address_line1, address_line2, country, city, state_province, zip_postal_code, website, tags, created_at, updated_at FROM projects
WHERE user_id = $1 
  AND ($2::text = '' OR (
    name <-> $2 < 0.8 OR  
    name ILIKE '%' || $2 || '%'  
  ))
ORDER BY 
    CASE WHEN $2 = '' THEN created_at END DESC,  -- If sqlc.arg('name') is empty, sort by created_at
    CASE WHEN $2 <> '' THEN name <-> $2 END,  -- If sqlc.arg('name') is provided, sort by trigram similarity
    length(name) ASC  -- Shorter names are preferred as tiebreaker
LIMIT $3
`

type SearchProjectsParams struct {
	UserID uuid.UUID `json:"userId"`
	Name   string    `json:"name"`
	Limit  int32     `json:"limit"`
}

func (q *Queries) SearchProjects(ctx context.Context, arg SearchProjectsParams) ([]Project, error) {
	rows, err := q.db.Query(ctx, searchProjects, arg.UserID, arg.Name, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ProjectID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.StartDate,
			&i.EndDate,
			&i.Budget,
			&i.ActualCost,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.Country,
			&i.City,
			&i.StateProvince,
			&i.ZipPostalCode,
			&i.Website,
			&i.Tags,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET
    name = COALESCE($1, name),
    description = $2,
    status = COALESCE($3, status),
    start_date = $4,
    end_date = $5,
    budget = $6,
    address_line1 = $7,
    address_line2 = $8,
    country = $9,
    city = $10,
    state_province = $11,
    zip_postal_code = $12,
    website = $13,
    tags = $14,
    updated_at = CURRENT_TIMESTAMP
WHERE 
    project_id = $15
    AND user_id = $16
RETURNING project_id, user_id, name, description, status, start_date, end_date, budget, actual_cost, address_line1, address_line2, country, city, state_province, zip_postal_code, website, tags, created_at, updated_at
`

type UpdateProjectParams struct {
	Name          pgtype.Text        `json:"name"`
	Description   pgtype.Text        `json:"description"`
	Status        NullProjectsStatus `json:"status"`
	StartDate     pgtype.Timestamp   `json:"startDate"`
	EndDate       pgtype.Timestamp   `json:"endDate"`
	Budget        pgtype.Numeric     `json:"budget"`
	AddressLine1  pgtype.Text        `json:"addressLine1"`
	AddressLine2  pgtype.Text        `json:"addressLine2"`
	Country       pgtype.Text        `json:"country"`
	City          pgtype.Text        `json:"city"`
	StateProvince pgtype.Text        `json:"stateProvince"`
	ZipPostalCode pgtype.Text        `json:"zipPostalCode"`
	Website       pgtype.Text        `json:"website"`
	Tags          []uuid.UUID        `json:"tags"`
	ProjectID     uuid.UUID          `json:"projectId"`
	UserID        uuid.UUID          `json:"userId"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProject,
		arg.Name,
		arg.Description,
		arg.Status,
		arg.StartDate,
		arg.EndDate,
		arg.Budget,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.Country,
		arg.City,
		arg.StateProvince,
		arg.ZipPostalCode,
		arg.Website,
		arg.Tags,
		arg.ProjectID,
		arg.UserID,
	)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
		&i.Budget,
		&i.ActualCost,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.Country,
		&i.City,
		&i.StateProvince,
		&i.ZipPostalCode,
		&i.Website,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
